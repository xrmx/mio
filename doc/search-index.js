var searchIndex={};
searchIndex["mio"] = {"doc":"Mio is a fast, low-level I/O library for Rust focusing on…","i":[[3,"Interest","mio","Interest used in registering.",null,null],[3,"Poll","","Polls for readiness events on all registered values.",null,null],[3,"Registry","","Registers I/O resources.",null,null],[3,"Token","","Associates readiness events with [`event::Source`]s.",null,null],[12,"0","","",0,null],[3,"Waker","","Waker allows cross-thread waking of [`Poll`].",null,null],[18,"READABLE","","Returns a `Interest` set representing readable interests.",1,null],[18,"WRITABLE","","Returns a `Interest` set representing writable interests.",1,null],[11,"add","","Add together two `Interest`.",1,[[["interest"]],["interest"]]],[11,"is_readable","","Returns true if the value includes readable readiness.",1,[[],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness.",1,[[],["bool"]]],[11,"is_aio","","Returns true if `Interest` contains AIO readiness",1,[[],["bool"]]],[11,"is_lio","","Returns true if `Interest` contains LIO readiness",1,[[],["bool"]]],[11,"registry","","Create a separate `Registry` which can be used to register…",2,[[["self"]],["registry"]]],[11,"poll","","Wait for readiness events",2,[[["events"],["self"],["option",["duration"]],["duration"]],["result"]]],[11,"register","","Register an [`event::Source`] with the `Poll` instance.",3,[[["interest"],["s"],["self"],["token"]],["result"]]],[11,"reregister","","Re-register an [`event::Source`] with the `Poll` instance.",3,[[["interest"],["s"],["self"],["token"]],["result"]]],[11,"deregister","","Deregister an [`event::Source`] with the `Poll` instance.",3,[[["s"],["self"]],["result"]]],[11,"try_clone","","Creates a new independently owned `Registry`.",3,[[["self"]],[["registry"],["result",["registry"]]]]],[11,"new","","Create a new `Waker`.",4,[[["token"],["registry"]],[["waker"],["result",["waker"]]]]],[11,"wake","","Wake up the [`Poll`] associated with this `Waker`.",4,[[["self"]],["result"]]],[0,"event","","Readiness event types and utilities.",null,null],[3,"Event","mio::event","A readiness event.",null,null],[3,"Events","","A collection of readiness events.",null,null],[3,"Iter","","[`Events`] iterator.",null,null],[11,"token","","Returns the event's token.",5,[[["self"]],["token"]]],[11,"is_readable","","Returns true if the event contains readable readiness.",5,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the event contains writable readiness.",5,[[["self"]],["bool"]]],[11,"is_error","","Returns true if the event contains error readiness.",5,[[["self"]],["bool"]]],[11,"is_read_closed","","Returns true if the event contains read closed readiness.",5,[[["self"]],["bool"]]],[11,"is_write_closed","","Returns true if the event contains write closed readiness.",5,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if the event contains priority readiness.",5,[[["self"]],["bool"]]],[11,"is_aio","","Returns true if the event contains AIO readiness.",5,[[["self"]],["bool"]]],[11,"is_lio","","Returns true if the event contains LIO readiness.",5,[[["self"]],["bool"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity`…",6,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",6,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",6,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",6,[[["self"]]]],[8,"Source","","An event source that may be registered with [`Registry`].",null,null],[10,"register","","Register `self` with the given `Registry` instance.",7,[[["registry"],["self"],["token"],["interest"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Registry` instance.",7,[[["registry"],["self"],["token"],["interest"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Registry` instance.",7,[[["self"],["registry"]],["result"]]],[11,"from","mio","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","mio::event","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"clone","mio","",1,[[["self"]],["interest"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"clone","mio::event","",8,[[["self"]],["iter"]]],[11,"cmp","mio","",1,[[["self"],["interest"]],["ordering"]]],[11,"cmp","","",0,[[["token"],["self"]],["ordering"]]],[11,"eq","","",1,[[["self"],["interest"]],["bool"]]],[11,"ne","","",1,[[["self"],["interest"]],["bool"]]],[11,"eq","","",0,[[["token"],["self"]],["bool"]]],[11,"ne","","",0,[[["token"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["interest"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["self"],["interest"]],["bool"]]],[11,"le","","",1,[[["self"],["interest"]],["bool"]]],[11,"gt","","",1,[[["self"],["interest"]],["bool"]]],[11,"ge","","",1,[[["self"],["interest"]],["bool"]]],[11,"partial_cmp","","",0,[[["token"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["token"],["self"]],["bool"]]],[11,"le","","",0,[[["token"],["self"]],["bool"]]],[11,"gt","","",0,[[["token"],["self"]],["bool"]]],[11,"ge","","",0,[[["token"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","mio::event","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"bitor","mio","",1,[[],["self"]]],[11,"bitor_assign","","",1,[[["self"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"as_raw_fd","","",2,[[["self"]],["rawfd"]]]],"p":[[3,"Token"],[3,"Interest"],[3,"Poll"],[3,"Registry"],[3,"Waker"],[3,"Event"],[3,"Events"],[8,"Source"],[3,"Iter"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);